import {
  require_papaparse_min
} from "./chunk-TQ6J6EWC.js";
import {
  SvelteComponentDev,
  add_location,
  append_styles,
  attr_dev,
  check_outros,
  children,
  claim_element,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  get_all_dirty_from_scope,
  get_slot_changes,
  globals,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  noop,
  safe_not_equal,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-K6MJRMI7.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/svelte-csv/src/CSVDownloader.svelte
var import_papaparse = __toESM(require_papaparse_min());
var file = "node_modules\\svelte-csv\\src\\CSVDownloader.svelte";
function add_css(target) {
  append_styles(target, "svelte-gokig2", ".link.svelte-gokig2{color:blue;text-decoration:underline;cursor:pointer}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ1NWRG93bmxvYWRlci5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBMENFLEtBQUssY0FBQyxDQUFBLEFBQ0osS0FBSyxDQUFFLElBQUksQ0FDWCxlQUFlLENBQUUsU0FBUyxDQUMxQixNQUFNLENBQUUsT0FBTyxBQUNqQixDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkNTVkRvd25sb2FkZXIuc3ZlbHRlIl19 */");
}
function create_else_block(ctx) {
  let button;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  const block = {
    c: function create() {
      button = element("button");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      button = claim_element(nodes, "BUTTON", {});
      var button_nodes = children(button);
      if (default_slot)
        default_slot.l(button_nodes);
      button_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(button, file, 36, 2, 977);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, button, anchor);
      if (default_slot) {
        default_slot.m(button, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          button,
          "click",
          function() {
            if (is_function(
              /*download*/
              ctx[4](
                /*data*/
                ctx[0],
                /*filename*/
                ctx[1],
                /*bom*/
                ctx[3]
              )
            ))
              ctx[4](
                /*data*/
                ctx[0],
                /*filename*/
                ctx[1],
                /*bom*/
                ctx[3]
              ).apply(this, arguments);
          },
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[5],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(button);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(36:0) {:else}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let span;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  const block = {
    c: function create() {
      span = element("span");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      if (default_slot)
        default_slot.l(span_nodes);
      span_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "link svelte-gokig2");
      add_location(span, file, 32, 2, 883);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, span, anchor);
      if (default_slot) {
        default_slot.m(span, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          span,
          "click",
          function() {
            if (is_function(
              /*download*/
              ctx[4](
                /*data*/
                ctx[0],
                /*filename*/
                ctx[1],
                /*bom*/
                ctx[3]
              )
            ))
              ctx[4](
                /*data*/
                ctx[0],
                /*filename*/
                ctx[1],
                /*bom*/
                ctx[3]
              ).apply(this, arguments);
          },
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[5],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(span);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(32:0) {#if type === 'link'}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*type*/
      ctx2[2] === "link"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("CSVDownloader", slots, ["default"]);
  let { data } = $$props;
  let { filename = "filename" } = $$props;
  let { type = "link" } = $$props;
  let { bom = 2 } = $$props;
  function download(data2, filename2, bom2) {
    const bomCode = bom2 ? "\uFEFF" : "";
    let csvContent = null;
    if (typeof data2 === "object") {
      csvContent = import_papaparse.default.unparse(data2);
    } else {
      csvContent = data2;
    }
    const csvData = new Blob([`${bomCode}${csvContent}`], { type: "text/csv;charset=utf-8;" });
    let csvURL = null;
    if (navigator.msSaveBlob) {
      csvURL = navigator.msSaveBlob(csvData, `${filename2}.csv`);
    } else {
      csvURL = window.URL.createObjectURL(csvData);
    }
    const link = document.createElement("a");
    link.href = csvURL;
    link.setAttribute("download", `${filename2}.csv`);
    link.click();
    link.remove();
  }
  $$self.$$.on_mount.push(function() {
    if (data === void 0 && !("data" in $$props || $$self.$$.bound[$$self.$$.props["data"]])) {
      console.warn("<CSVDownloader> was created without expected prop 'data'");
    }
  });
  const writable_props = ["data", "filename", "type", "bom"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<CSVDownloader> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(0, data = $$props2.data);
    if ("filename" in $$props2)
      $$invalidate(1, filename = $$props2.filename);
    if ("type" in $$props2)
      $$invalidate(2, type = $$props2.type);
    if ("bom" in $$props2)
      $$invalidate(3, bom = $$props2.bom);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    PapaParse: import_papaparse.default,
    data,
    filename,
    type,
    bom,
    download
  });
  $$self.$inject_state = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(0, data = $$props2.data);
    if ("filename" in $$props2)
      $$invalidate(1, filename = $$props2.filename);
    if ("type" in $$props2)
      $$invalidate(2, type = $$props2.type);
    if ("bom" in $$props2)
      $$invalidate(3, bom = $$props2.bom);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [data, filename, type, bom, download, $$scope, slots];
}
var CSVDownloader = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { data: 0, filename: 1, type: 2, bom: 3 }, add_css);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "CSVDownloader",
      options,
      id: create_fragment.name
    });
  }
  get data() {
    throw new Error("<CSVDownloader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value) {
    throw new Error("<CSVDownloader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get filename() {
    throw new Error("<CSVDownloader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set filename(value) {
    throw new Error("<CSVDownloader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get type() {
    throw new Error("<CSVDownloader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set type(value) {
    throw new Error("<CSVDownloader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bom() {
    throw new Error("<CSVDownloader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bom(value) {
    throw new Error("<CSVDownloader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var CSVDownloader_default = CSVDownloader;

// node_modules/svelte-csv/src/jsonToCSV.svelte
var import_papaparse2 = __toESM(require_papaparse_min());
function create_fragment2(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("JsonToCSV", slots, []);
  function jsonToCSV(json, options) {
    return import_papaparse2.default.unparse(json, options);
  }
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<JsonToCSV> was created with unknown prop '${key}'`);
  });
  $$self.$capture_state = () => ({ PapaParse: import_papaparse2.default, jsonToCSV });
  return [jsonToCSV];
}
var JsonToCSV = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { jsonToCSV: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "JsonToCSV",
      options,
      id: create_fragment2.name
    });
  }
  get jsonToCSV() {
    return this.$$.ctx[0];
  }
  set jsonToCSV(value) {
    throw new Error("<JsonToCSV>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var jsonToCSV_default = JsonToCSV;

// node_modules/svelte-csv/src/readRemoteFile.svelte
var import_papaparse3 = __toESM(require_papaparse_min());
var { Object: Object_1 } = globals;
function create_fragment3(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ReadRemoteFile", slots, []);
  function readRemoteFile(url, options) {
    import_papaparse3.default.parse(url, Object.assign({}, { download: true }, options));
  }
  const writable_props = [];
  Object_1.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ReadRemoteFile> was created with unknown prop '${key}'`);
  });
  $$self.$capture_state = () => ({ PapaParse: import_papaparse3.default, readRemoteFile });
  return [readRemoteFile];
}
var ReadRemoteFile = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { readRemoteFile: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ReadRemoteFile",
      options,
      id: create_fragment3.name
    });
  }
  get readRemoteFile() {
    return this.$$.ctx[0];
  }
  set readRemoteFile(value) {
    throw new Error("<ReadRemoteFile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var readRemoteFile_default = ReadRemoteFile;

// node_modules/svelte-csv/src/readString.svelte
var import_papaparse4 = __toESM(require_papaparse_min());
function create_fragment4(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance4($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ReadString", slots, []);
  function readString(str, options) {
    return import_papaparse4.default.parse(str, options);
  }
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ReadString> was created with unknown prop '${key}'`);
  });
  $$self.$capture_state = () => ({ PapaParse: import_papaparse4.default, readString });
  return [readString];
}
var ReadString = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance4, create_fragment4, safe_not_equal, { readString: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ReadString",
      options,
      id: create_fragment4.name
    });
  }
  get readString() {
    return this.$$.ctx[0];
  }
  set readString(value) {
    throw new Error("<ReadString>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var readString_default = ReadString;
export {
  CSVDownloader_default as CSVDownloader,
  jsonToCSV_default as jsonToCSVr,
  readRemoteFile_default as readRemoteFile,
  readString_default as readString
};
//# sourceMappingURL=svelte-csv.js.map
